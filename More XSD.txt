1. xs:include – Merging Multiple XSDs (Same Namespace)
- Used to include another XSD file within the current schema.
- The included schema must have the same target namespace as the main schema.
- It's useful for modularizing large schemas.

Example:
<xs:include schemaLocation="anotherSchema.xsd"/>

Use case: When you want to split a large XSD into multiple files but keep them under the same namespace.

2. xs:import – Importing External Schemas (Different Namespace)
- Used to import another XSD schema that has a different target namespace.
- This allows referencing types and elements from an external schema.

Example:
<xs:import namespace="http://example.com/schema" schemaLocation="externalSchema.xsd"/>

Use case: If you need to use types from a different organization’s schema (e.g., an external address format).

3. xs:union – Combining Multiple Simple Types
- Used to define a type that accepts values from multiple simple types.

Example:
<xs:simpleType name="unionType">
    <xs:union memberTypes="xs:int xs:string"/>
</xs:simpleType>

Use case: If a field should accept both numbers and text (e.g., a product ID that can be numeric or alphanumeric).

4. xs:attributeGroup – Grouping Attributes for Reuse
- Defines a reusable set of attributes that can be referenced by multiple elements.

Example:
<xs:attributeGroup name="commonAttributes">
    <xs:attribute name="id" type="xs:string"/>
    <xs:attribute name="lang" type="xs:string"/>
</xs:attributeGroup>

<xs:element name="book">
    <xs:complexType>
        <xs:attributeGroup ref="commonAttributes"/>
    </xs:complexType>
</xs:element>

Use case: If multiple elements share the same attributes (e.g., id and lang for books, authors, and publishers).

5. xs:group – Grouping Elements for Reuse
- Defines a reusable set of elements that can be used in multiple places.

Example:
<xs:group name="addressGroup">
    <xs:sequence>
        <xs:element name="street" type="xs:string"/>
        <xs:element name="city" type="xs:string"/>
    </xs:sequence>
</xs:group>

<xs:element name="person">
    <xs:complexType>
        <xs:sequence>
            <xs:group ref="addressGroup"/>
        </xs:sequence>
    </xs:complexType>
</xs:element>

Use case: When multiple elements (e.g., person and company) have the same sub-elements like address details.

6. xs:any – Allowing Any XML Element
- Allows inserting any XML element from another namespace.
- The processContents attribute controls validation:
  - strict: Must be defined in an imported XSD.
  - lax: Validates if a schema exists.
  - skip: Doesn't check validation.

Example:
<xs:any namespace="##other" processContents="lax"/>

Use case: When a schema needs to allow custom or extended elements from other namespaces.

7. xs:notation – Defining Media Types
- Used to specify an expected format for an element (e.g., images, audio).
- It provides metadata but does not enforce the format.

Example:
<xs:notation name="image" public="image/jpeg" system="http://example.com/images"/>

Use case: If an element should store media file types like JPEG, MP3, or PDF.

8. xs:key – Defining Unique Keys
- Ensures that an element has a unique identifier across the document.

Example:
<xs:key name="uniqueBookID">
    <xs:selector xpath="book"/>
    <xs:field xpath="@id"/>
</xs:key>

Use case: Ensuring that book IDs are unique within an XML library catalog.

9. xs:keyref – Defining Foreign Key Relationships
- Used to reference a key defined elsewhere (like a foreign key in databases).

Example:
<xs:keyref name="authorRef" refer="authorID">
    <xs:selector xpath="book"/>
    <xs:field xpath="@author"/>
</xs:keyref>

Use case: Ensuring that a book’s author attribute refers to an existing author.

10. xs:annotation – Adding Documentation to the Schema
- Allows adding comments or explanations inside an XSD.

Example:
<xs:annotation>
    <xs:documentation>This schema defines the structure of a book</xs:documentation>
</xs:annotation>

Use case: Making an XSD more readable and providing useful descriptions.

11. xs:substitutionGroup – Allowing Element Substitutions
- Defines a base element and allows other elements to replace it.

Example:
<xs:element name="vehicle" abstract="true"/>
<xs:element name="car" substitutionGroup="vehicle"/>
<xs:element name="bike" substitutionGroup="vehicle"/>

Use case: Allowing different vehicle types (car, bike) to be used wherever vehicle is expected.

Summary Table:
| Feature              | Purpose |
|----------------------|---------|
| xs:include          | Merges another schema (same namespace). |
| xs:import           | Imports a schema from a different namespace. |
| xs:union            | Combines multiple simple types. |
| xs:attributeGroup   | Groups multiple attributes for reuse. |
| xs:group            | Groups multiple elements for reuse. |
| xs:any              | Allows any XML element (useful for extensions). |
| xs:notation         | Defines a media type (e.g., image format). |
| xs:key              | Defines unique keys in the schema. |
| xs:keyref           | Defines foreign key constraints. |
| xs:annotation       | Adds documentation to the schema. |
| xs:substitutionGroup | Allows substituting one element for another. |

